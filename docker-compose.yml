services:

  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    container_name: service-registry
    environment:
      - EUREKA_INSTANCE_HOSTNAME=service-registry
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
    networks:
      - app-network
    ports:
      - "8761:8761"

  mysql_db1:
    image: mysql:lts
    container_name: mysql_db1
    environment:
      MYSQL_ROOT_PASSWORD: orders-password
      MYSQL_DATABASE: orders_db
    volumes:
      - orders_db_data:/var/lib/mysql
    networks:
      - app-network
    ports:
      - "33061:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  orders-microservice:
    build:
      context: ./orders-service
      dockerfile: Dockerfile
    container_name: orders-microservice
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql_db1:3306/orders_db
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=orders-password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://host.docker.internal:8083/realms/Microservices
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://host.docker.internal:8083/realms/Microservices/protocol/openid-connect/certs
    depends_on:
      mysql_db1:
        condition: service_healthy
      service-registry:
        condition: service_started
    networks:
      - app-network
    ports:
      - "8081:8081"

  products_db:
    image: mongo:latest
    container_name: products_db
    environment:
      MONGO_INITDB_DATABASE: products_db
    volumes:
      - products_db_data:/data/db
    networks:
      - app-network
    ports:
      - "27017:27017"

  products-microservice:
    build:
      context: ./products-service
      dockerfile: Dockerfile
    container_name: products-microservice
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://products_db:27017/products_db
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://host.docker.internal:8083/realms/Microservices
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://host.docker.internal:8083/realms/Microservices/protocol/openid-connect/certs
    depends_on:
      products_db:
          condition: service_started
      service-registry:
          condition: service_started
    networks:
      - app-network
    ports:
      - "8082:8082"

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://service-registry:8761/eureka/
      - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://host.docker.internal:8083/realms/Microservices
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://host.docker.internal:8083/realms/Microservices/protocol/openid-connect/certs
    depends_on:
      products-microservice:
        condition: service_started
      orders-microservice:
        condition: service_started
      service-registry:
        condition: service_started
    networks:
      - app-network
    ports:
      - "8765:8765"

  keycloak-mysql:
    image: mysql:lts
    container_name: keycloak-mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    volumes:
      - keycloak_data:/var/lib/mysql
    networks:
      - app-network
    ports:
      - "33062:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: ["start-dev"]
    environment:
      KC_DB: mysql
      KC_DB_URL_HOST: keycloak-mysql
      KC_DB_URL_DATABASE: keycloak
      KC_DB_PASSWORD: password
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_HOSTNAME: host.docker.internal
      KC_HTTP_PORT: 8083
    ports:
      - "8083:8083"
    depends_on:
      keycloak-mysql:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  orders_db_data:
  products_db_data:
  keycloak_data: